%% Extended Kalman Filter

clc;clear all; close all;

% System discretization
dt  = 0.05;

vehicleModel = Unicycle('OutputEquation', @(t,x) x, 'ny',3 );         

Qsys = 0.5*eye(3);
Rsys = 5*eye(3);

vehicleReal = CtSystem(...
    'StateEquation'    , @(t,x,u) vehicleModel.f(t,x,u) + chol(Qsys)*randn(vehicleModel.nx,1),...
    'InitialCondition', randn(3,1),...
    'OutputEquation'   , @(t,x) x + chol(Rsys)*randn(vehicleModel.ny,1), 'ny',3 ... % Add an observation model
    );  

%% Extended Bucy-Kalman Filter
        
%see help GeneralSystem.computeLinearization
vehicleModel.computeLinearization('Sampled');
        
Qobs = 0.5*eye(3);
Robs = 5*eye(3);

vehicleReal.stateObserver = EkbfFilter(vehicleModel,...
            'StateNoiseMatrix'  , Qobs,...
            'OutputNoiseMatrix' , Robs,...
            'InitialCondition' , [2*ones(3,1);
                                   10*reshape(eye(3),9,1)]);

vehicleReal.controller = UniGoToPoint([50;50]);


a = VirtualArena(vehicleReal,...
    'ExtraLogs'        ,   MeasurementsLog(vehicleModel.ny), ...
    'StoppingCriteria'   , @(i,agentsList)i>15,...
    'StepPlotFunction'   , @stepPlotFunctionEkf, ...
    'PlottingStep'       , 1,...
    'DiscretizationStep' , dt...
    );

logs = a.run();


replaySys = ReplayMeasuramentsCtSystem('TimeLog',logs{1}.time,'MeasurementLog',logs{1}.measurements,'nu',2);
repl
replaySys.stateObserver = EkbfFilter(vehicleModel,...
            'StateNoiseMatrix'  , Qsys,...
            'OutputNoiseMatrix' , Rsys,...
            'InitialCondition' , [2*ones(3,1);
                                   10*reshape(eye(3),9,1)]);